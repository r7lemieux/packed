class PackedGrailsPlugin {
    // the plugin version
    def version = "0.1"
    // the version or versions of Grails the plugin is designed for
    def grailsVersion = "1.2.2 > *"
    // the other plugins this plugin depends on
    def dependsOn = [:]
    // resources that are excluded from plugin packaging
    def pluginExcludes = [
            "grails-app/views/error.gsp"
    ]

    // TODO Fill in these fields
    def author = "Your name"
    def authorEmail = ""
    def title = "Plugin summary/headline"
    def description = '''\\
Brief description of the plugin.
'''

    // URL to the plugin's documentation
    def documentation = "http://grails.org/plugin/packed"

    def doWithWebDescriptor = { xml ->
        // TODO Implement additions to web.xml (optional), this event occurs before 
    } 

    def doWithSpring = {
        // TODO Implement runtime spring config (optional)
                installTemplates()
    }

    def doWithDynamicMethods = { ctx ->
        // TODO Implement registering dynamic methods to classes (optional)
    }

    def doWithApplicationContext = { applicationContext ->
        // TODO Implement post initialization spring config (optional)
        installTemplates()
        
    }

    def onChange = { event ->
        // TODO Implement code that is executed when any artefact that this plugin is
        // watching is modified and reloaded. The event contains: event.source,
        // event.application, event.manager, event.ctx, and event.plugin.
    }

    def onConfigChange = { event ->
        // TODO Implement code that is executed when the project configuration changes.
        // The event is the same as for 'onChange'.
    }
      
def installTemplates() {
  copyDir(dirName:'src/templates', overwrite:false)
  copyDir(dirName:'src/templates/scaffolding/regen/packed', overwrite:true)
  copyDir(dirName:'web-app/css/regen/packed/listEdit/', overwrite:true)
  copyDir(dirName:'web-app/images/')
  copyDir(dirName:'web-app/js/')
}
  
def copyDir(Map args) {
  def dirName = args.dirName
  def overwrite = args.overwrite
  def sourceDir = "${packedPluginDir}/${dirName}" + (args.fileName? "/${args.fileName}":'')
  def targetDir = basedir + '/' + dirName

  // only if template dir already exists in, ask to overwrite templates
  if (overwrite == null && new File(targetDir).exists()) {
     if (!isInteractive || confirmInput("Overwrite existing + ${dirName} ? [y/n]","overwrite.files"))
      overwrite = true
  }
  else {
      ant.mkdir(dir: targetDir)
  }

  ant.copy(todir:"${targetDir}", overwrite:overwrite) {
     fileset(dir:"${sourceDir}", includes:"**" )
  }
}
 
}
